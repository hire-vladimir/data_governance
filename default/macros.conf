[splunk_default_vs_custom_roles]
definition = eval type=if(match(title, "^(?:admin|can_delete|power|splunk-system-role|user|ess_admin|ess_analyst|ess_user)$"), "default", "custom")
iseval = 0

[mvcount_zero(2)]
args = field, pattern
definition = if(isnull(mvcount(mvfilter(match($field$,$pattern$)))),0,mvcount(mvfilter(match($field$,$pattern$))))
iseval = 0

[compute_accessible_index_count]
definition = case(\
       isnotnull(mvfind(srchIndexesAllowed,"^_\*$")) AND isnotnull(mvfind(srchIndexesAllowed,"^\*$")), 'c_non-internal'+'c_internal',\
       isnotnull(mvfind(srchIndexesAllowed,"^\*$")), 'c_non-internal' + `mvcount_zero(srchIndexesAllowed, \"^_[^\*]+$\")`,\
       isnotnull(mvfind(srchIndexesAllowed,"^_\*$")), 'c_internal' + `mvcount_zero(srchIndexesAllowed, \"^[^_]+$\")`,\
       srchIndexesAllowed == "", 0,\
       isnull(mvfind(srchIndexesAllowed,"^_\*$")) AND isnull(mvfind(srchIndexesAllowed,"^\*$")), mvcount(srchIndexesAllowed)\
  )
iseval = 0

[prettyIndexNotation(1)]
args = field
definition = rex field=$field$ mode=sed "s/_\*/All internal indexes/g"  | rex field=$field$ mode=sed "s/\*/All non-internal indexes/g"
iseval = 0

[prettymv(1)]
args = field
definition = eval $field$=mvjoin($field$, ", ")
iseval = 0

[prettyRoleNotation(1)]
args = field
definition = rex field=$field$ mode=sed "s/\*/All roles/g"
iseval = 0

[compute_user_to_indexes]
definition = rest splunk_server=local /services/authentication/users | `prettymv(roles)` | fields title, roles | rename title AS username\
\
| makemv delim=", " roles | mvexpand roles | rename roles AS role | join role [| rest splunk_server=local /services/authorization/roles |  rename title AS role | fillnull value="" | fields role, srchIndexesAllowed]\
| fields username, srchIndexesAllowed \
\
| rex field=srchIndexesAllowed mode=sed "s/\s/,/g" \
| makemv delim="," srchIndexesAllowed \
| mvcombine srchIndexesAllowed | mvcombine srchIndexesAllowed | rex field=srchIndexesAllowed mode=sed "s/\s/,/g" | makemv delim="," srchIndexesAllowed | eventstats values(srchIndexesAllowed) AS didx by username | fields username, didx | mvcombine didx | rex field=didx mode=sed "s/\s/, /g"\
| rename didx AS accessible_indexes
iseval = 0

[indexes_to_counts(1)]
args = indexes
definition = join  [| rest splunk_server=local /services/data/indexes | fields title | eval type=if(match(title,"^_\w+$"),"c_internal","c_non-internal") | eval x="woot" | stats count by type, x | xyseries x type count | fields - x]  \
\
| makemv delim=", " $indexes$ | rename $indexes$ AS srchIndexesAllowed\
| eval totalAccess = `compute_accessible_index_count` | fillnull value="noidea" totalAccess | fields - c_*\
| rename srchIndexesAllowed AS accessible_indexes\
| mvcombine accessible_indexes
iseval = 0

[splunk_default_vs_custom_indexes]
definition = eval type=if(match(title, "^(?:main|summary|_\w+)$"), "default", "custom")
iseval = 0

[compute_indexes_to_roles_and_users]
definition = `compute_user_to_indexes` \
| join username [| rest splunk_server=local /services/authentication/users | `prettymv(roles)` | rename title AS username| fields username, roles] \
| makemv delim=", " accessible_indexes | mvexpand accessible_indexes\
| join accessible_indexes type=outer [| rest /services/data/indexes | fields title | dedup title | where match(title, "^_\w+$") | mvcombine title | `prettymv(title)` | rename title AS expanded_indexes | eval accessible_indexes="_*"] \
| join accessible_indexes type=outer [| rest /services/data/indexes | fields title | dedup title | where match(title, "^[^_]+$") | mvcombine title | `prettymv(title)` | rename title AS expanded_indexes | eval accessible_indexes="*"]\
\
| eval accessible_indexes=if(match(accessible_indexes, "^(?:_\*|\*)$"), expanded_indexes, accessible_indexes) | fields - expanded_indexes\
| makemv delim=", " accessible_indexes | mvexpand accessible_indexes \
| makemv delim=", " roles | mvexpand roles \
| stats values(roles) AS roles values(username) AS users by accessible_indexes\
\
| rename accessible_indexes AS index\
\
| `prettymv(roles)` | `prettymv(users)` | eval user_count=mvcount(split(users, ", ")) | eval role_count=mvcount(split(roles, ", "))
iseval = 0

[compute_capabilities_to_roles]
definition = join capability type=outer [| rest splunk_server=local /services/authentication/users | fields roles, capabilities\
| mvexpand capabilities | mvcombine roles | mvcombine roles\
| rex field=roles mode=sed "s/\s/, /g"\
| makemv delim=", " roles | eventstats values(roles) AS roles by capabilities | eval role_count=mvcount(roles)\
| `prettymv(roles)` | rename capabilities AS capability] | fillnull value=0 role_count
iseval = 0

[compute_capabilities_to_users]
definition = join capability type=outer [| rest splunk_server=local /services/authentication/users | fields title, capabilities | rename title AS username\
| mvexpand capabilities | mvcombine username \
| eval user_count=mvcount(username)\
| `prettymv(username)` | rename username AS users capabilities AS capability] | fillnull value=0 user_count
iseval = 0

[splunk_internal_apps]
definition = eval isInternalApp=if(match(label, "^(?:SplunkForwarder| SplunkLightForwarder|Splunk Data Preview|Search & Reporting|sample data|SA-Eventgen|legacy|learned|Home|Getting started)$"), 1, 0)\

iseval = 0

[prettybool(1)]
args = field
definition = eval $field$=if($field$==1, "yes", "no")
iseval = 0

[splunk_classify_apps]
definition = `splunk_internal_apps` | eval app_source=case(isInternalApp==1, "internal", isnull(details), "custom", isInternalApp==0, "apps.splunk.com")\
| fields - isInternalApp
iseval = 0

[prettyUserNotation(1)]
args = field
definition = rex field=$field$ mode=sed "s/\*/All users/g"
iseval = 0

[convert_delims_space2spacecomma(1)]
args = field
definition = rex field=$field$ mode=sed "s/\s/, /g"
iseval = 0

[compute_apps_to_users_and_roles]
definition = rest splunk_server=local /services/apps/local/ | fields title, eai:acl.perms.read, eai:acl.perms.write\
\
| rename title AS app eai:acl.perms.read AS read eai:acl.perms.write AS write\
| mvexpand read | mvexpand write\
\
| join type=outer read  [| rest splunk_server=local /services/authentication/users | fields title, roles | mvexpand roles | rename title AS user_read roles AS read | mvcombine user_read]\
| join type=outer write  [| rest splunk_server=local /services/authentication/users | fields title, roles | mvexpand roles | rename title AS user_write roles AS write | mvcombine user_write]\
\
| eval user_read=if(match(read, "^\*$"), "*", user_read)\
| eval user_write=if(match(write, "^\*$"), "*", user_write)\
\
| stats values(read) AS roles_read values(user_read) AS users_read values(write) AS roles_write values(user_write) AS users_write by app \
| mvcombine roles_read | mvcombine roles_write | mvcombine users_read | mvcombine users_write\
\
| eval orig_roles_read = roles_read\
| eval orig_roles_write = roles_write\
| eval orig_users_read = users_read\
| eval orig_users_write = users_write\
\
| eval x=1 \
| join x [ |rest splunk_server=local /services/authentication/users | stats values(title) AS all_users count AS user_count | eval x=1] | join x [ |rest splunk_server=local /services/authorization/roles | stats values(title) AS all_roles count AS role_count | eval x=1] \
| fields - x\
\
| eval roles_read=if(match(roles_read, "^\*$"), all_roles, roles_read)\
| eval roles_write=if(match(roles_write, "^\*$"), all_roles, roles_write)\
| eval users_read=if(match(users_read, "^\*$"), all_users, users_read)\
| eval users_write=if(match(users_write, "^\*$"), all_users, users_write)\
| fields - all_roles all_users\
\
| `convert_all_delims_space2spacecomma(roles_* users_* orig_*)`\
\
| eval role_read_count=if(match(orig_roles_read, "^\*$"), role_count, mvcount(split(roles_read, ", ")))\
| eval user_read_count=if(match(orig_users_read, "^\*$"), user_count, mvcount(split(users_read, ", "))) \
| eval role_write_count=if(match(orig_roles_write, "^\*$"), role_count, mvcount(split(roles_write, ", ")))\
| eval user_write_count=if(match(orig_users_write, "^\*$"), user_count, mvcount(split(users_write, ", ")))\

iseval = 0

[convert_all_delims_space2spacecomma(1)]
args = fields
definition = foreach $fields$ [`convert_delims_space2spacecomma(<<FIELD>>)`]
iseval = 0

[prettyObjectDetails]
definition = fields eai:acl.app, title, eai:acl.sharing, eai:acl.perms.read, eai:acl.perms.write\
| rename eai:acl.app AS app, eai:acl.sharing AS sharing, eai:acl.perms.read AS "read", eai:acl.perms.write AS "write"\
| `prettyRoleNotation(read)` | `prettyRoleNotation(write)`\
\
| eval sharing=if(sharing=="user","private", sharing)\
| eval read=if(sharing=="private", "Private", read)\
| eval write=if(sharing=="private", "Private", write)\
| fillnull value="admin" read write\
| `prettymv(read)` | `prettymv(write)`\
| rename read AS "read roles" write AS "write roles" sharing AS "sharing context"
iseval = 0

[compute_user_executed_searches(1)]
args = user
definition = index=_audit action=search (id=* OR search_id=*) user="$user$"\
                  | eval search_id=if(isnull(search_id), id, search_id)\
                  | replace '*' with * in search_id\
                  | search search_id!=rt_* search_id!=searchparsetmp*\
                  | rex "search='(?<search>.*?)', autojoin"\
                  | rex "savedsearch_name=\"(?<savedsearch_name>.*?)\"\]\["\
                  |  eval search=case(isnotnull(search),search,isnull(search) AND savedsearch_name!="","Scheduled search name : ".savedsearch_name,isnull(search) AND savedsearch_name=="","SID : ".search_id)\
                  |  eval user = if(user="n/a", "nobody", user)\
                  | stats min(_time) as _time last(user) as user last(search) as search by search_id | search search_id=* search!=typeahead* search!="|history*" search!=*_internal* search!=*_audit*\
\
| search search_id!=subsearch_* | stats count values(user) as User(s) by search | sort 50 - count | fields count User(s) search
iseval = 0

[search_manager_app_overview_app_to_roles]
definition = `compute_apps_to_users_and_roles` | join app [| rest splunk_server=local /services/apps/local | rename title AS app | fields app, disabled, visible] | rename roles_read AS role | search $role_app$ AND * | fields app, role | makemv delim=", " role | mvexpand role | stats count by app, role | search *
iseval = 0

[search_manager_app_overview_app_to_roles(4)]
args = type, app, roles, state
definition = `compute_apps_to_users_and_roles` | join app [| rest splunk_server=local /services/apps/local | rename title AS app | fields app, disabled, visible] | rename roles_read AS role | search $roles$ AND $state$ | fields app, role | makemv delim=", " role | mvexpand role | stats count by app, role | search app
iseval = 0

[compute_environment_detail_counts]
definition = rest splunk_server=local /servicesNS/-/-/saved/searches | stats count AS savedsearches, sum(action.email) AS alerts, sum(is_scheduled) AS scheduledsearches,  sum(auto_summarize) AS ra\
| appendcols [| rest splunk_server=local /servicesNS/-/-/datamodel/model | stats count AS datamodels]\
| appendcols [| rest splunk_server=local /servicesNS/-/-/data/ui/views | stats count AS dashboards]\
| appendcols [| rest splunk_server=local /services/apps/local | stats count AS apps]\
\
| appendcols [| rest splunk_server=local /services/authentication/users | stats count AS users]\
| appendcols [| rest splunk_server=local /services/authorization/roles | stats count AS roles]\
\
| appendcols [| metadata type=sources | stats count AS sources]\
| appendcols [| metadata type=sourcetypes | stats count AS sourcetypes]\
| appendcols [| metadata type=hosts | stats count AS hosts]\
| appendcols [| rest splunk_server=local /services/data/indexes | stats count as indexes]\
\
| eval search_name="governance_system_details"
iseval = 0

[get_environment_detail_counts]
definition = `compute_environment_detail_counts` | eval _time=now()\
| append [search index=summary search_name=governance_system_details | fields savedsearches, alerts, scheduledsearches, ra, apps, dashboards, datamodels, hosts, indexes, roles, search_name, sources, sourcetypes, users | fields - _raw]\
| fields - search_name
iseval = 0

[special_names]
definition = "Aaron Kornhauser, Mike Barrie, Sanford Owings"
iseval = 0
